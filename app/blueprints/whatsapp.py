# app/blueprints/whatsapp.py
"""
M√≥dulo de integra√ß√£o com WhatsApp via Evolution API
Respons√°vel por enviar notifica√ß√µes autom√°ticas para colaboradores
"""

import requests
import os
from flask import current_app
from datetime import datetime


class WhatsAppService:
    """Servi√ßo de envio de mensagens WhatsApp via Evolution API"""
    
    def __init__(self):
        """Inicializa o servi√ßo com as configura√ß√µes da Evolution API"""
        self.api_url = os.getenv('EVOLUTION_API_URL', 'https://evolution-api-gomobi.onrender.com')
        self.api_key = os.getenv('EVOLUTION_API_KEY', 'GoMobi2024SecretKey!@#')
        self.instance = os.getenv('EVOLUTION_INSTANCE', 'gomobi_whatsapp')
        
    def _format_phone(self, phone):
        """
        Formata o n√∫mero de telefone para o padr√£o internacional
        
        Args:
            phone (str): N√∫mero de telefone (pode ter v√°rios formatos)
            
        Returns:
            str: N√∫mero formatado (ex: 5512996108116)
        """
        if not phone:
            return None
            
        # Remove todos os caracteres n√£o num√©ricos
        phone = ''.join(filter(str.isdigit, phone))
        
        # Se n√£o come√ßar com 55, adiciona (c√≥digo do Brasil)
        if not phone.startswith('55'):
            phone = '55' + phone
            
        # Verifica se tem pelo menos 12 d√≠gitos (55 + DDD + n√∫mero)
        if len(phone) < 12:
            current_app.logger.warning(f"N√∫mero de telefone inv√°lido: {phone}")
            return None
            
        return phone
    
    def _check_connection(self):
        """
        Verifica se a inst√¢ncia do WhatsApp est√° conectada
        
        Returns:
            bool: True se conectado, False caso contr√°rio
        """
        try:
            url = f"{self.api_url}/instance/connectionState/{self.instance}"
            headers = {'apikey': self.api_key}
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                is_connected = data.get('state') == 'open'
                
                if not is_connected:
                    current_app.logger.warning(f"WhatsApp n√£o conectado. Estado: {data.get('state')}")
                    
                return is_connected
            else:
                current_app.logger.error(f"Erro ao verificar conex√£o: {response.status_code}")
                return False
                
        except Exception as e:
            current_app.logger.error(f"Erro ao verificar conex√£o WhatsApp: {str(e)}")
            return False
    
    def send_text_message(self, phone, message):
        """
        Envia mensagem de texto para um n√∫mero
        
        Args:
            phone (str): N√∫mero de telefone do destinat√°rio
            message (str): Texto da mensagem
            
        Returns:
            dict: Resposta da API ou None em caso de erro
        """
        try:
            # Formata o n√∫mero
            formatted_phone = self._format_phone(phone)
            if not formatted_phone:
                current_app.logger.error(f"N√∫mero de telefone inv√°lido: {phone}")
                return None
            
            # Verifica conex√£o
            if not self._check_connection():
                current_app.logger.error("WhatsApp n√£o est√° conectado")
                return None
            
            # Envia a mensagem
            url = f"{self.api_url}/message/sendText/{self.instance}"
            headers = {
                'Content-Type': 'application/json',
                'apikey': self.api_key
            }
            payload = {
                'number': formatted_phone,
                'text': message
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            
            if response.status_code == 201 or response.status_code == 200:
                current_app.logger.info(f"Mensagem enviada com sucesso para {formatted_phone}")
                return response.json()
            else:
                current_app.logger.error(f"Erro ao enviar mensagem: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            current_app.logger.error(f"Erro ao enviar mensagem WhatsApp: {str(e)}")
            return None
    
    def send_viagem_confirmada(self, viagem, colaborador):
        """
        Envia mensagem de confirma√ß√£o de viagem para o colaborador
        
        Args:
            viagem: Objeto Viagem
            colaborador: Objeto Colaborador
            
        Returns:
            dict: Resposta da API ou None em caso de erro
        """
        try:
            # Verifica se o colaborador tem telefone
            if not colaborador.telefone:
                current_app.logger.warning(f"Colaborador {colaborador.nome} n√£o tem telefone cadastrado")
                return None
            
            # Busca informa√ß√µes do motorista
            motorista_nome = viagem.motorista.nome if viagem.motorista else "N√£o atribu√≠do"
            veiculo_modelo = viagem.motorista.veiculo_modelo if viagem.motorista else "N/A"
            veiculo_cor = viagem.motorista.veiculo_cor if viagem.motorista else "N/A"
            veiculo_placa = viagem.veiculo_placa or "N/A"
            
            # Busca informa√ß√µes da empresa/planta
            # Assumindo que a viagem tem relacionamento com solicita√ß√µes
            # e solicita√ß√µes t√™m relacionamento com colaborador que tem empresa
            empresa_nome = "N/A"
            planta_nome = "N/A"
            
            if colaborador.empresa:
                empresa_nome = colaborador.empresa.nome
            
            if colaborador.planta:
                planta_nome = colaborador.planta.nome
            
            # Formata data e hor√°rio
            if viagem.data_viagem:
                data_formatada = viagem.data_viagem.strftime('%d/%m/%Y')
            else:
                data_formatada = "A definir"
            
            if viagem.horario_entrada:
                horario_formatado = viagem.horario_entrada.strftime('%H:%M')
            else:
                horario_formatado = "A definir"
            
            # Monta a mensagem com emojis
            message = f"""üöó *Seja Bem-Vindo √† Go Mobi!*

‚úÖ Sua Viagem *#{viagem.id}* foi confirmada pelo Motorista *{motorista_nome}*.

üìã *Dados da Viagem:*

üè¢ *Empresa:* {empresa_nome}
üè≠ *Planta:* {planta_nome}
üìÖ *Data:* {data_formatada}
üïê *Hor√°rio:* {horario_formatado}

üë®‚Äç‚úàÔ∏è *Motorista:* {motorista_nome}
üöô *Ve√≠culo:* {veiculo_modelo}
üé® *Cor:* {veiculo_cor}
üöó *Placa:* {veiculo_placa}

_Tenha uma √≥tima viagem!_ üåü"""
            
            # Envia a mensagem
            return self.send_text_message(colaborador.telefone, message)
            
        except Exception as e:
            current_app.logger.error(f"Erro ao enviar mensagem de viagem confirmada: {str(e)}")
            return None
    
    def send_viagem_cancelada(self, viagem, colaborador, motivo=None):
        """
        Envia mensagem de cancelamento de viagem para o colaborador
        
        Args:
            viagem: Objeto Viagem
            colaborador: Objeto Colaborador
            motivo (str, optional): Motivo do cancelamento
            
        Returns:
            dict: Resposta da API ou None em caso de erro
        """
        try:
            if not colaborador.telefone:
                current_app.logger.warning(f"Colaborador {colaborador.nome} n√£o tem telefone cadastrado")
                return None
            
            # Monta a mensagem
            message = f"""‚ö†Ô∏è *Aten√ß√£o!*

‚ùå Sua Viagem *#{viagem.id}* foi cancelada.

üë§ *Colaborador:* {colaborador.nome}"""
            
            if motivo:
                message += f"\n\nüìù *Motivo:* {motivo}"
            
            message += "\n\n_Entre em contato com a Go Mobi para mais informa√ß√µes._"
            
            # Envia a mensagem
            return self.send_text_message(colaborador.telefone, message)
            
        except Exception as e:
            current_app.logger.error(f"Erro ao enviar mensagem de viagem cancelada: {str(e)}")
            return None


# Inst√¢ncia global do servi√ßo
whatsapp_service = WhatsAppService()


def enviar_notificacao_viagem_aceita(viagem):
    """
    Fun√ß√£o auxiliar para enviar notifica√ß√£o quando viagem √© aceita
    Envia mensagem para todos os colaboradores da viagem
    
    Args:
        viagem: Objeto Viagem
        
    Returns:
        list: Lista de resultados do envio
    """
    from app.models import Solicitacao, Colaborador
    
    resultados = []
    
    try:
        # Busca todas as solicita√ß√µes da viagem
        solicitacoes = Solicitacao.query.filter_by(viagem_id=viagem.id).all()
        
        # Envia mensagem para cada colaborador
        for solicitacao in solicitacoes:
            colaborador = solicitacao.colaborador
            
            if colaborador and colaborador.telefone:
                resultado = whatsapp_service.send_viagem_confirmada(viagem, colaborador)
                resultados.append({
                    'colaborador': colaborador.nome,
                    'telefone': colaborador.telefone,
                    'sucesso': resultado is not None
                })
                
        current_app.logger.info(f"Enviadas {len(resultados)} notifica√ß√µes para viagem #{viagem.id}")
        return resultados
        
    except Exception as e:
        current_app.logger.error(f"Erro ao enviar notifica√ß√µes da viagem #{viagem.id}: {str(e)}")
        return resultados


def enviar_notificacao_viagem_cancelada(viagem, motivo=None):
    """
    Fun√ß√£o auxiliar para enviar notifica√ß√£o quando viagem √© cancelada
    Envia mensagem para todos os colaboradores da viagem
    
    Args:
        viagem: Objeto Viagem
        motivo (str, optional): Motivo do cancelamento
        
    Returns:
        list: Lista de resultados do envio
    """
    from app.models import Solicitacao, Colaborador
    
    resultados = []
    
    try:
        # Busca todas as solicita√ß√µes da viagem
        solicitacoes = Solicitacao.query.filter_by(viagem_id=viagem.id).all()
        
        # Envia mensagem para cada colaborador
        for solicitacao in solicitacoes:
            colaborador = solicitacao.colaborador
            
            if colaborador and colaborador.telefone:
                resultado = whatsapp_service.send_viagem_cancelada(viagem, colaborador, motivo)
                resultados.append({
                    'colaborador': colaborador.nome,
                    'telefone': colaborador.telefone,
                    'sucesso': resultado is not None
                })
                
        current_app.logger.info(f"Enviadas {len(resultados)} notifica√ß√µes de cancelamento para viagem #{viagem.id}")
        return resultados
        
    except Exception as e:
        current_app.logger.error(f"Erro ao enviar notifica√ß√µes de cancelamento da viagem #{viagem.id}: {str(e)}")
        return resultados

