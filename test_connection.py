# test_connection.py
from dotenv import load_dotenv
import os
from sqlalchemy import create_engine, text

# Carrega .env (n√£o .env.local)
load_dotenv('.env')

database_url = os.getenv('DATABASE_URL')

if not database_url:
    print("‚ùå DATABASE_URL n√£o configurado no .env!")
    exit(1)

print(f"üìä Conectando em: {database_url[:60]}...")

try:
    engine = create_engine(database_url)
    with engine.connect() as conn:
        # Vers√£o do PostgreSQL
        result = conn.execute(text("SELECT version()"))
        version = result.fetchone()[0]
        print(f"‚úÖ Conex√£o OK!")
        print(f"üì¶ PostgreSQL: {version[:70]}...")
        
        # Nome do banco
        result = conn.execute(text("SELECT current_database()"))
        db_name = result.fetchone()[0]
        print(f"üóÑÔ∏è  Banco: {db_name}")
        
        # Verificar ambiente
        if 'homolog' in db_name.lower():
            print("‚úÖ Conectado no banco de HOMOLOGA√á√ÉO")
        elif 'go_mobi_db' == db_name.lower():
            print("‚ö†Ô∏è  ATEN√á√ÉO: Conectado no banco de PRODU√á√ÉO!")
        else:
            print(f"‚ÑπÔ∏è  Banco: {db_name}")
            
        # Contar tabelas
        result = conn.execute(text("""
            SELECT COUNT(*) 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        """))
        table_count = result.fetchone()[0]
        print(f"üìä Tabelas no banco: {table_count}")
        
        # Verificar usu√°rio conectado
        result = conn.execute(text("SELECT current_user"))
        user = result.fetchone()[0]
        print(f"üë§ Usu√°rio: {user}")
        
except Exception as e:
    print(f"‚ùå Erro de conex√£o: {e}")
    print("\nüí° Dicas:")
    print("  1. Verifique se o DATABASE_URL est√° correto no .env")
    print("  2. Verifique se o banco est√° ativo no Render")
    print("  3. Verifique sua conex√£o com a internet")